# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt6 UI code generator 6.1.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(548, 595)
        self.wid_center = QtWidgets.QWidget(MainWindow)
        self.wid_center.setObjectName("wid_center")
        self.wid_tab = QtWidgets.QTabWidget(self.wid_center)
        self.wid_tab.setEnabled(False)
        self.wid_tab.setGeometry(QtCore.QRect(0, 0, 550, 300))
        self.wid_tab.setObjectName("wid_tab")
        self.tab_task = QtWidgets.QWidget()
        self.tab_task.setObjectName("tab_task")
        self.group_task = QtWidgets.QGroupBox(self.tab_task)
        self.group_task.setGeometry(QtCore.QRect(0, 0, 544, 275))
        self.group_task.setObjectName("group_task")
        self.btn_recommend = QtWidgets.QPushButton(self.group_task)
        self.btn_recommend.setGeometry(QtCore.QRect(154, 18, 60, 25))
        self.btn_recommend.setObjectName("btn_recommend")
        self.tree_tasks = QtWidgets.QTreeWidget(self.group_task)
        self.tree_tasks.setGeometry(QtCore.QRect(328, 41, 210, 230))
        self.tree_tasks.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.CustomContextMenu)
        self.tree_tasks.setAlternatingRowColors(True)
        self.tree_tasks.setObjectName("tree_tasks")
        self.btn_reset = QtWidgets.QPushButton(self.group_task)
        self.btn_reset.setGeometry(QtCore.QRect(8, 18, 60, 25))
        self.btn_reset.setObjectName("btn_reset")
        self.list_todo = QtWidgets.QListWidget(self.group_task)
        self.list_todo.setGeometry(QtCore.QRect(6, 41, 210, 230))
        self.list_todo.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.CustomContextMenu)
        self.list_todo.setAcceptDrops(True)
        self.list_todo.setDragEnabled(True)
        self.list_todo.setDefaultDropAction(QtCore.Qt.DropAction.MoveAction)
        self.list_todo.setAlternatingRowColors(True)
        self.list_todo.setObjectName("list_todo")
        self.lab_exchange = QtWidgets.QLabel(self.group_task)
        self.lab_exchange.setGeometry(QtCore.QRect(242, 120, 61, 51))
        self.lab_exchange.setText("")
        self.lab_exchange.setObjectName("lab_exchange")
        self.btn_remove = QtWidgets.QPushButton(self.group_task)
        self.btn_remove.setGeometry(QtCore.QRect(80, 18, 60, 25))
        self.btn_remove.setObjectName("btn_remove")
        self.wid_tab.addTab(self.tab_task, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.line_9 = QtWidgets.QFrame(self.tab_2)
        self.line_9.setGeometry(QtCore.QRect(300, 15, 15, 250))
        self.line_9.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.line_9.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_9.setObjectName("line_9")
        self.lab_boss = QtWidgets.QLabel(self.tab_2)
        self.lab_boss.setEnabled(False)
        self.lab_boss.setGeometry(QtCore.QRect(10, 10, 291, 161))
        self.lab_boss.setWordWrap(True)
        self.lab_boss.setObjectName("lab_boss")
        self.check_boss_use_money = QtWidgets.QCheckBox(self.tab_2)
        self.check_boss_use_money.setGeometry(QtCore.QRect(320, 195, 121, 20))
        self.check_boss_use_money.setObjectName("check_boss_use_money")
        self.check_boss_type_crab = QtWidgets.QCheckBox(self.tab_2)
        self.check_boss_type_crab.setGeometry(QtCore.QRect(420, 93, 41, 21))
        self.check_boss_type_crab.setObjectName("check_boss_type_crab")
        self.spin_boss_farm_intv = QtWidgets.QSpinBox(self.tab_2)
        self.spin_boss_farm_intv.setGeometry(QtCore.QRect(431, 156, 42, 22))
        self.spin_boss_farm_intv.setMinimum(5)
        self.spin_boss_farm_intv.setMaximum(20)
        self.spin_boss_farm_intv.setObjectName("spin_boss_farm_intv")
        self.spin_boss_count = QtWidgets.QSpinBox(self.tab_2)
        self.spin_boss_count.setGeometry(QtCore.QRect(380, 23, 42, 22))
        self.spin_boss_count.setMinimum(1)
        self.spin_boss_count.setMaximum(100)
        self.spin_boss_count.setProperty("value", 10)
        self.spin_boss_count.setObjectName("spin_boss_count")
        self.check_boss_type_bird = QtWidgets.QCheckBox(self.tab_2)
        self.check_boss_type_bird.setGeometry(QtCore.QRect(380, 93, 41, 21))
        self.check_boss_type_bird.setChecked(True)
        self.check_boss_type_bird.setObjectName("check_boss_type_bird")
        self.label_3 = QtWidgets.QLabel(self.tab_2)
        self.label_3.setGeometry(QtCore.QRect(320, 160, 101, 16))
        self.label_3.setObjectName("label_3")
        self.lab_boss_count = QtWidgets.QLabel(self.tab_2)
        self.lab_boss_count.setGeometry(QtCore.QRect(320, 25, 55, 16))
        self.lab_boss_count.setObjectName("lab_boss_count")
        self.lab_boss_qlty = QtWidgets.QLabel(self.tab_2)
        self.lab_boss_qlty.setGeometry(QtCore.QRect(320, 60, 55, 16))
        self.lab_boss_qlty.setObjectName("lab_boss_qlty")
        self.lab_boss_type = QtWidgets.QLabel(self.tab_2)
        self.lab_boss_type.setGeometry(QtCore.QRect(320, 95, 55, 16))
        self.lab_boss_type.setObjectName("lab_boss_type")
        self.check_boss_farm = QtWidgets.QCheckBox(self.tab_2)
        self.check_boss_farm.setGeometry(QtCore.QRect(320, 125, 121, 21))
        self.check_boss_farm.setChecked(True)
        self.check_boss_farm.setObjectName("check_boss_farm")
        self.check_boss_qlty_hard = QtWidgets.QCheckBox(self.tab_2)
        self.check_boss_qlty_hard.setGeometry(QtCore.QRect(380, 58, 41, 21))
        self.check_boss_qlty_hard.setChecked(True)
        self.check_boss_qlty_hard.setObjectName("check_boss_qlty_hard")
        self.check_boss_type_phoenix = QtWidgets.QCheckBox(self.tab_2)
        self.check_boss_type_phoenix.setGeometry(QtCore.QRect(500, 93, 41, 21))
        self.check_boss_type_phoenix.setChecked(True)
        self.check_boss_type_phoenix.setObjectName("check_boss_type_phoenix")
        self.check_boss_type_snake = QtWidgets.QCheckBox(self.tab_2)
        self.check_boss_type_snake.setGeometry(QtCore.QRect(460, 93, 41, 21))
        self.check_boss_type_snake.setObjectName("check_boss_type_snake")
        self.check_boss_qlty_mid = QtWidgets.QCheckBox(self.tab_2)
        self.check_boss_qlty_mid.setGeometry(QtCore.QRect(420, 58, 41, 21))
        self.check_boss_qlty_mid.setObjectName("check_boss_qlty_mid")
        self.wid_tab.addTab(self.tab_2, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.line_8 = QtWidgets.QFrame(self.tab)
        self.line_8.setGeometry(QtCore.QRect(300, 15, 15, 250))
        self.line_8.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.line_8.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_8.setObjectName("line_8")
        self.lab_ctd = QtWidgets.QLabel(self.tab)
        self.lab_ctd.setGeometry(QtCore.QRect(10, 10, 291, 121))
        self.lab_ctd.setWordWrap(True)
        self.lab_ctd.setObjectName("lab_ctd")
        self.check_ctd_rightexit = QtWidgets.QCheckBox(self.tab)
        self.check_ctd_rightexit.setGeometry(QtCore.QRect(320, 125, 135, 29))
        self.check_ctd_rightexit.setObjectName("check_ctd_rightexit")
        self.check_ctd_fight3rd = QtWidgets.QCheckBox(self.tab)
        self.check_ctd_fight3rd.setGeometry(QtCore.QRect(320, 60, 120, 29))
        self.check_ctd_fight3rd.setChecked(True)
        self.check_ctd_fight3rd.setObjectName("check_ctd_fight3rd")
        self.check_ctd_3speed = QtWidgets.QCheckBox(self.tab)
        self.check_ctd_3speed.setGeometry(QtCore.QRect(320, 95, 80, 29))
        self.check_ctd_3speed.setChecked(True)
        self.check_ctd_3speed.setObjectName("check_ctd_3speed")
        self.lab_ctd_count = QtWidgets.QLabel(self.tab)
        self.lab_ctd_count.setGeometry(QtCore.QRect(320, 25, 55, 25))
        self.lab_ctd_count.setObjectName("lab_ctd_count")
        self.spin_ctd_count = QtWidgets.QSpinBox(self.tab)
        self.spin_ctd_count.setGeometry(QtCore.QRect(380, 25, 51, 21))
        self.spin_ctd_count.setMinimum(1)
        self.spin_ctd_count.setMaximum(500)
        self.spin_ctd_count.setObjectName("spin_ctd_count")
        self.wid_tab.addTab(self.tab, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.line_7 = QtWidgets.QFrame(self.tab_3)
        self.line_7.setGeometry(QtCore.QRect(300, 15, 15, 250))
        self.line_7.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.line_7.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_7.setObjectName("line_7")
        self.lab_fdry = QtWidgets.QLabel(self.tab_3)
        self.lab_fdry.setGeometry(QtCore.QRect(10, 10, 291, 161))
        self.lab_fdry.setWordWrap(True)
        self.lab_fdry.setObjectName("lab_fdry")
        self.combo_fdry_level = QtWidgets.QComboBox(self.tab_3)
        self.combo_fdry_level.setGeometry(QtCore.QRect(380, 21, 69, 22))
        self.combo_fdry_level.setObjectName("combo_fdry_level")
        self.combo_fdry_level.addItem("")
        self.combo_fdry_level.addItem("")
        self.combo_fdry_level.addItem("")
        self.combo_fdry_level.addItem("")
        self.combo_fdry_level.addItem("")
        self.combo_fdry_level.addItem("")
        self.combo_fdry_level.addItem("")
        self.lab_fdry_qlty = QtWidgets.QLabel(self.tab_3)
        self.lab_fdry_qlty.setGeometry(QtCore.QRect(320, 60, 55, 16))
        self.lab_fdry_qlty.setObjectName("lab_fdry_qlty")
        self.spin_fdry_round = QtWidgets.QSpinBox(self.tab_3)
        self.spin_fdry_round.setGeometry(QtCore.QRect(380, 94, 42, 22))
        self.spin_fdry_round.setMinimum(1)
        self.spin_fdry_round.setMaximum(10)
        self.spin_fdry_round.setObjectName("spin_fdry_round")
        self.lab_fdry_round_2 = QtWidgets.QLabel(self.tab_3)
        self.lab_fdry_round_2.setGeometry(QtCore.QRect(430, 95, 71, 21))
        self.lab_fdry_round_2.setObjectName("lab_fdry_round_2")
        self.lab_fdry_level = QtWidgets.QLabel(self.tab_3)
        self.lab_fdry_level.setGeometry(QtCore.QRect(320, 25, 55, 16))
        self.lab_fdry_level.setObjectName("lab_fdry_level")
        self.lab_fdry_round = QtWidgets.QLabel(self.tab_3)
        self.lab_fdry_round.setGeometry(QtCore.QRect(320, 95, 55, 16))
        self.lab_fdry_round.setObjectName("lab_fdry_round")
        self.combo_fdry_qlty = QtWidgets.QComboBox(self.tab_3)
        self.combo_fdry_qlty.setGeometry(QtCore.QRect(380, 59, 91, 22))
        self.combo_fdry_qlty.setObjectName("combo_fdry_qlty")
        self.combo_fdry_qlty.addItem("")
        self.combo_fdry_qlty.addItem("")
        self.combo_fdry_qlty.addItem("")
        self.combo_fdry_qlty.addItem("")
        self.combo_fdry_qlty.addItem("")
        self.wid_tab.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.lab_ad = QtWidgets.QLabel(self.tab_4)
        self.lab_ad.setGeometry(QtCore.QRect(10, 30, 280, 200))
        self.lab_ad.setText("")
        self.lab_ad.setObjectName("lab_ad")
        self.line_5 = QtWidgets.QFrame(self.tab_4)
        self.line_5.setGeometry(QtCore.QRect(300, 15, 15, 250))
        self.line_5.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_5.setObjectName("line_5")
        self.check_ad_timesand = QtWidgets.QCheckBox(self.tab_4)
        self.check_ad_timesand.setGeometry(QtCore.QRect(320, 25, 111, 21))
        self.check_ad_timesand.setChecked(True)
        self.check_ad_timesand.setObjectName("check_ad_timesand")
        self.wid_tab.addTab(self.tab_4, "")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.line_6 = QtWidgets.QFrame(self.tab_5)
        self.line_6.setGeometry(QtCore.QRect(300, 15, 15, 250))
        self.line_6.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_6.setObjectName("line_6")
        self.lab_boss_2 = QtWidgets.QLabel(self.tab_5)
        self.lab_boss_2.setEnabled(False)
        self.lab_boss_2.setGeometry(QtCore.QRect(10, 10, 291, 71))
        self.lab_boss_2.setWordWrap(True)
        self.lab_boss_2.setObjectName("lab_boss_2")
        self.radioButton = QtWidgets.QRadioButton(self.tab_5)
        self.radioButton.setGeometry(QtCore.QRect(320, 25, 95, 20))
        self.radioButton.setChecked(True)
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(self.tab_5)
        self.radioButton_2.setGeometry(QtCore.QRect(320, 60, 95, 20))
        self.radioButton_2.setObjectName("radioButton_2")
        self.wid_tab.addTab(self.tab_5, "")
        self.tab_tools = QtWidgets.QWidget()
        self.tab_tools.setObjectName("tab_tools")
        self.label_2 = QtWidgets.QLabel(self.tab_tools)
        self.label_2.setGeometry(QtCore.QRect(320, 60, 31, 16))
        self.label_2.setObjectName("label_2")
        self.label = QtWidgets.QLabel(self.tab_tools)
        self.label.setGeometry(QtCore.QRect(320, 25, 31, 16))
        self.label.setObjectName("label")
        self.spin_tools_click_intv = QtWidgets.QSpinBox(self.tab_tools)
        self.spin_tools_click_intv.setGeometry(QtCore.QRect(360, 60, 61, 22))
        self.spin_tools_click_intv.setMinimum(200)
        self.spin_tools_click_intv.setMaximum(10000)
        self.spin_tools_click_intv.setSingleStep(100)
        self.spin_tools_click_intv.setObjectName("spin_tools_click_intv")
        self.spin_tools_click_y = QtWidgets.QSpinBox(self.tab_tools)
        self.spin_tools_click_y.setEnabled(False)
        self.spin_tools_click_y.setGeometry(QtCore.QRect(420, 20, 51, 22))
        self.spin_tools_click_y.setReadOnly(True)
        self.spin_tools_click_y.setMaximum(5000)
        self.spin_tools_click_y.setObjectName("spin_tools_click_y")
        self.spin_tools_click_x = QtWidgets.QSpinBox(self.tab_tools)
        self.spin_tools_click_x.setEnabled(False)
        self.spin_tools_click_x.setGeometry(QtCore.QRect(360, 20, 51, 22))
        self.spin_tools_click_x.setMaximum(5000)
        self.spin_tools_click_x.setObjectName("spin_tools_click_x")
        self.label_4 = QtWidgets.QLabel(self.tab_tools)
        self.label_4.setGeometry(QtCore.QRect(430, 60, 31, 16))
        self.label_4.setObjectName("label_4")
        self.line_4 = QtWidgets.QFrame(self.tab_tools)
        self.line_4.setGeometry(QtCore.QRect(300, 15, 15, 250))
        self.line_4.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_4.setObjectName("line_4")
        self.pushButton = QtWidgets.QPushButton(self.tab_tools)
        self.pushButton.setGeometry(QtCore.QRect(490, 19, 41, 24))
        self.pushButton.setObjectName("pushButton")
        self.lab_boss_3 = QtWidgets.QLabel(self.tab_tools)
        self.lab_boss_3.setEnabled(False)
        self.lab_boss_3.setGeometry(QtCore.QRect(10, 10, 291, 81))
        self.lab_boss_3.setWordWrap(True)
        self.lab_boss_3.setObjectName("lab_boss_3")
        self.wid_tab.addTab(self.tab_tools, "")
        self.group_run = QtWidgets.QGroupBox(self.wid_center)
        self.group_run.setEnabled(False)
        self.group_run.setGeometry(QtCore.QRect(1, 450, 545, 100))
        self.group_run.setObjectName("group_run")
        self.check_top = QtWidgets.QCheckBox(self.group_run)
        self.check_top.setGeometry(QtCore.QRect(280, 20, 20, 20))
        self.check_top.setText("")
        self.check_top.setObjectName("check_top")
        self.radio_lefttop = QtWidgets.QRadioButton(self.group_run)
        self.radio_lefttop.setGeometry(QtCore.QRect(380, 20, 50, 20))
        self.radio_lefttop.setObjectName("radio_lefttop")
        self.radio_righttop = QtWidgets.QRadioButton(self.group_run)
        self.radio_righttop.setGeometry(QtCore.QRect(430, 20, 50, 20))
        self.radio_righttop.setObjectName("radio_righttop")
        self.label_top = QtWidgets.QLabel(self.group_run)
        self.label_top.setGeometry(QtCore.QRect(240, 20, 30, 20))
        self.label_top.setObjectName("label_top")
        self.label_loc = QtWidgets.QLabel(self.group_run)
        self.label_loc.setGeometry(QtCore.QRect(340, 20, 30, 20))
        self.label_loc.setObjectName("label_loc")
        self.btn_run = QtWidgets.QPushButton(self.group_run)
        self.btn_run.setGeometry(QtCore.QRect(150, 60, 80, 30))
        self.btn_run.setObjectName("btn_run")
        self.btn_stop = QtWidgets.QPushButton(self.group_run)
        self.btn_stop.setEnabled(False)
        self.btn_stop.setGeometry(QtCore.QRect(320, 60, 80, 30))
        self.btn_stop.setObjectName("btn_stop")
        self.radio_fg = QtWidgets.QRadioButton(self.group_run)
        self.radio_fg.setGeometry(QtCore.QRect(110, 20, 50, 20))
        self.radio_fg.setObjectName("radio_fg")
        self.radio_bg = QtWidgets.QRadioButton(self.group_run)
        self.radio_bg.setGeometry(QtCore.QRect(160, 20, 50, 20))
        self.radio_bg.setObjectName("radio_bg")
        self.label_mode = QtWidgets.QLabel(self.group_run)
        self.label_mode.setGeometry(QtCore.QRect(70, 19, 30, 20))
        self.label_mode.setObjectName("label_mode")
        self.line = QtWidgets.QFrame(self.group_run)
        self.line.setGeometry(QtCore.QRect(210, 20, 20, 20))
        self.line.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.group_run)
        self.line_2.setGeometry(QtCore.QRect(310, 20, 20, 20))
        self.line_2.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_2.setObjectName("line_2")
        self.btn_stop.raise_()
        self.btn_run.raise_()
        self.check_top.raise_()
        self.radio_lefttop.raise_()
        self.radio_righttop.raise_()
        self.label_top.raise_()
        self.label_loc.raise_()
        self.radio_fg.raise_()
        self.radio_bg.raise_()
        self.label_mode.raise_()
        self.line.raise_()
        self.line_2.raise_()
        self.text_log = QtWidgets.QPlainTextEdit(self.wid_center)
        self.text_log.setGeometry(QtCore.QRect(1, 300, 545, 150))
        self.text_log.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.CustomContextMenu)
        self.text_log.setStyleSheet("background-color: rgb(43, 43, 43);\n"
"color: rgb(0, 239, 0);")
        self.text_log.setReadOnly(True)
        self.text_log.setPlainText("")
        self.text_log.setObjectName("text_log")
        MainWindow.setCentralWidget(self.wid_center)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 548, 22))
        self.menubar.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.menubar.setObjectName("menubar")
        self.menu_account = QtWidgets.QMenu(self.menubar)
        self.menu_account.setObjectName("menu_account")
        self.menu_system = QtWidgets.QMenu(self.menubar)
        self.menu_system.setObjectName("menu_system")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menu_versioncheck = QtGui.QAction(MainWindow)
        self.menu_versioncheck.setEnabled(False)
        self.menu_versioncheck.setObjectName("menu_versioncheck")
        self.menu_versionhis = QtGui.QAction(MainWindow)
        self.menu_versionhis.setObjectName("menu_versionhis")
        self.menu_login = QtGui.QAction(MainWindow)
        self.menu_login.setObjectName("menu_login")
        self.menu_reg = QtGui.QAction(MainWindow)
        self.menu_reg.setObjectName("menu_reg")
        self.menu_recharge = QtGui.QAction(MainWindow)
        self.menu_recharge.setEnabled(False)
        self.menu_recharge.setObjectName("menu_recharge")
        self.menu_modifypwd = QtGui.QAction(MainWindow)
        self.menu_modifypwd.setEnabled(False)
        self.menu_modifypwd.setObjectName("menu_modifypwd")
        self.menu_logout = QtGui.QAction(MainWindow)
        self.menu_logout.setEnabled(False)
        self.menu_logout.setObjectName("menu_logout")
        self.menu_help = QtGui.QAction(MainWindow)
        self.menu_help.setObjectName("menu_help")
        self.menu_contact = QtGui.QAction(MainWindow)
        self.menu_contact.setObjectName("menu_contact")
        self.menu_exit = QtGui.QAction(MainWindow)
        self.menu_exit.setObjectName("menu_exit")
        self.menu_account.addAction(self.menu_login)
        self.menu_account.addAction(self.menu_reg)
        self.menu_account.addAction(self.menu_recharge)
        self.menu_account.addAction(self.menu_modifypwd)
        self.menu_account.addAction(self.menu_logout)
        self.menu_system.addAction(self.menu_versioncheck)
        self.menu_system.addAction(self.menu_help)
        self.menu_system.addAction(self.menu_contact)
        self.menu_system.addAction(self.menu_exit)
        self.menubar.addAction(self.menu_system.menuAction())
        self.menubar.addAction(self.menu_account.menuAction())

        self.retranslateUi(MainWindow)
        self.wid_tab.setCurrentIndex(0)
        self.combo_fdry_level.setCurrentIndex(3)
        self.combo_fdry_qlty.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "菩提思"))
        self.group_task.setTitle(_translate("MainWindow", "任务配置"))
        self.btn_recommend.setToolTip(_translate("MainWindow", "经过检验的任务配置及执行顺序"))
        self.btn_recommend.setText(_translate("MainWindow", "推荐配置"))
        self.btn_recommend.setShortcut(_translate("MainWindow", "Right"))
        self.tree_tasks.headerItem().setText(0, _translate("MainWindow", "请选择任务"))
        self.btn_reset.setToolTip(_translate("MainWindow", "重置任务到初始状态"))
        self.btn_reset.setText(_translate("MainWindow", "全部重置"))
        self.btn_reset.setShortcut(_translate("MainWindow", "Left"))
        self.btn_remove.setToolTip(_translate("MainWindow", "移除所有已添加任务"))
        self.btn_remove.setText(_translate("MainWindow", "全部移除"))
        self.btn_remove.setShortcut(_translate("MainWindow", "Right"))
        self.wid_tab.setTabText(self.wid_tab.indexOf(self.tab_task), _translate("MainWindow", "任务"))
        self.lab_boss.setText(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Microsoft YaHei UI\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt; font-weight:700; color:#00aaff;\">使用说明：</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt; color:#00aaff;\">1. 执行前请将需要检测妖窟BOSS的</span><span style=\" font-size:10pt; color:#ff0000;\">微信聊天窗口拖拽独立</span><span style=\" font-size:10pt; color:#00aaff;\">出来，窗口可以被遮挡</span><span style=\" font-size:10pt; color:#55aaff;\">；</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt; color:#00aaff;\">2. 使用机缘刷材料为</span><span style=\" font-size:10pt; color:#ff0000;\">独立配置</span><span style=\" font-size:10pt; color:#00aaff;\">，该模式需先进入妖窟BOSS界面后再开始执行，机缘不富裕玩家请慎用该模式；</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt; color:#00aaff;\">3. 上车之后会</span><span style=\" font-size:10pt; color:#ff0000;\">立即退出</span><span style=\" font-size:10pt; color:#00aaff;\">，无需担心秒车！</span></p></body></html>"))
        self.check_boss_use_money.setText(_translate("MainWindow", "使用机缘刷材料"))
        self.check_boss_type_crab.setText(_translate("MainWindow", "蟹"))
        self.check_boss_type_bird.setText(_translate("MainWindow", "鸟"))
        self.label_3.setText(_translate("MainWindow", "刷材料间隔（分钟）"))
        self.lab_boss_count.setText(_translate("MainWindow", "上车次数："))
        self.lab_boss_qlty.setText(_translate("MainWindow", "选择品质："))
        self.lab_boss_type.setText(_translate("MainWindow", "选择类型："))
        self.check_boss_farm.setText(_translate("MainWindow", "开启刷材料模式"))
        self.check_boss_qlty_hard.setText(_translate("MainWindow", "难"))
        self.check_boss_type_phoenix.setText(_translate("MainWindow", "凤"))
        self.check_boss_type_snake.setText(_translate("MainWindow", "蛇"))
        self.check_boss_qlty_mid.setText(_translate("MainWindow", "中"))
        self.wid_tab.setTabText(self.wid_tab.indexOf(self.tab_2), _translate("MainWindow", "妖窟"))
        self.lab_ctd.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:11pt; font-weight:700; color:#00aaff;\">使用说明：</span></p><p><span style=\" font-size:10pt; color:#00aaff;\">1. 请进入斗技界面后再开始执行；</span></p><p><span style=\" font-size:10pt; color:#00aaff;\">2. 默认挑战斗技积分最低的即第三个，取消则挑战第一个；</span></p><p><span style=\" font-size:10pt; color:#00aaff;\">3. 斗技活动期间快速达标可开启&quot;立即退出&quot;。</span></p></body></html>"))
        self.check_ctd_rightexit.setText(_translate("MainWindow", "立即退出"))
        self.check_ctd_fight3rd.setText(_translate("MainWindow", "优先挑战低积分"))
        self.check_ctd_3speed.setText(_translate("MainWindow", "三倍速战斗"))
        self.lab_ctd_count.setText(_translate("MainWindow", "战斗次数："))
        self.wid_tab.setTabText(self.wid_tab.indexOf(self.tab), _translate("MainWindow", "斗技"))
        self.lab_fdry.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:11pt; font-weight:700; color:#00aaff;\">使用说明：</span></p><p><span style=\" font-size:10pt; color:#00aaff;\">1. </span><span style=\" font-size:10pt; color:#ff0000;\">执行前请进入铸剑池并选择好铸造弟子，同时保证背包空间充足</span><span style=\" font-size:10pt; color:#55aaff;\">；</span></p><p><span style=\" font-size:10pt; color:#00aaff;\">2. 每轮最多铸造50件装备，结合背包空间余量设置合理分解参数；</span></p><p><span style=\" font-size:10pt; color:#00aaff;\">3. 选择铸造等级后只会使用普通材料铸造分解，一种部位材料用完后会</span><span style=\" font-size:10pt; color:#ff0000;\">自动切换</span><span style=\" font-size:10pt; color:#00aaff;\">到其他部位。</span></p></body></html>"))
        self.combo_fdry_level.setItemText(0, _translate("MainWindow", "1级"))
        self.combo_fdry_level.setItemText(1, _translate("MainWindow", "2级"))
        self.combo_fdry_level.setItemText(2, _translate("MainWindow", "3级"))
        self.combo_fdry_level.setItemText(3, _translate("MainWindow", "4级"))
        self.combo_fdry_level.setItemText(4, _translate("MainWindow", "5级"))
        self.combo_fdry_level.setItemText(5, _translate("MainWindow", "6级"))
        self.combo_fdry_level.setItemText(6, _translate("MainWindow", "7级"))
        self.lab_fdry_qlty.setText(_translate("MainWindow", "分解品质："))
        self.lab_fdry_round_2.setText(_translate("MainWindow", "轮分解一次"))
        self.lab_fdry_level.setText(_translate("MainWindow", "铸造等级："))
        self.lab_fdry_round.setText(_translate("MainWindow", "分解控制："))
        self.combo_fdry_qlty.setItemText(0, _translate("MainWindow", "绿色及以下"))
        self.combo_fdry_qlty.setItemText(1, _translate("MainWindow", "蓝色及以下"))
        self.combo_fdry_qlty.setItemText(2, _translate("MainWindow", "紫色及以下"))
        self.combo_fdry_qlty.setItemText(3, _translate("MainWindow", "橙色及以下"))
        self.combo_fdry_qlty.setItemText(4, _translate("MainWindow", "红色及以下"))
        self.wid_tab.setTabText(self.wid_tab.indexOf(self.tab_3), _translate("MainWindow", "铸造"))
        self.check_ad_timesand.setText(_translate("MainWindow", "使用时幻沙"))
        self.wid_tab.setTabText(self.wid_tab.indexOf(self.tab_4), _translate("MainWindow", "广告"))
        self.lab_boss_2.setText(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Microsoft YaHei UI\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt; font-weight:700; color:#00aaff;\">使用说明：</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt; color:#00aaff;\">位于</span><span style=\" font-size:10pt; color:#ff0000;\">游戏主界面</span><span style=\" font-size:10pt; color:#00aaff;\">后执行， 每周密令将在每周四不定时更新且于下周四零点失效。</span></p></body></html>"))
        self.radioButton.setText(_translate("MainWindow", "每周密令"))
        self.radioButton_2.setText(_translate("MainWindow", "全部密令"))
        self.wid_tab.setTabText(self.wid_tab.indexOf(self.tab_5), _translate("MainWindow", "密令"))
        self.label_2.setText(_translate("MainWindow", "间隔："))
        self.label.setText(_translate("MainWindow", "坐标："))
        self.label_4.setText(_translate("MainWindow", "毫秒"))
        self.pushButton.setText(_translate("MainWindow", "定位"))
        self.lab_boss_3.setText(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Microsoft YaHei UI\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt; font-weight:700; color:#00aaff;\">使用说明：</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt; color:#00aaff;\">点击右栏</span><span style=\" font-size:10pt; font-weight:700; color:#ff0000;\">定位</span><span style=\" font-size:10pt; color:#00aaff;\">按钮后移动鼠标到指定位置然再</span><span style=\" font-size:10pt; font-weight:700; color:#ff0000;\">左键单击</span><span style=\" font-size:10pt; color:#00aaff;\">就</span><span style=\" font-size:10pt; color:#00aaff;\">会自动记录当前位置，接下来可以</span><span style=\" font-size:10pt; color:#00aaff;\">直接</span><span style=\" font-size:10pt; color:#00aaff;\">运行鼠标连点。</span></p></body></html>"))
        self.wid_tab.setTabText(self.wid_tab.indexOf(self.tab_tools), _translate("MainWindow", "连点"))
        self.group_run.setTitle(_translate("MainWindow", "运行控制"))
        self.radio_lefttop.setText(_translate("MainWindow", "左上"))
        self.radio_righttop.setText(_translate("MainWindow", "右上"))
        self.label_top.setText(_translate("MainWindow", "置顶："))
        self.label_loc.setText(_translate("MainWindow", "位置："))
        self.btn_run.setText(_translate("MainWindow", "运行(Home)"))
        self.btn_run.setShortcut(_translate("MainWindow", "Home"))
        self.btn_stop.setText(_translate("MainWindow", "终止(End)"))
        self.btn_stop.setShortcut(_translate("MainWindow", "End"))
        self.radio_fg.setText(_translate("MainWindow", "前台"))
        self.radio_bg.setText(_translate("MainWindow", "后台"))
        self.label_mode.setText(_translate("MainWindow", "模式："))
        self.menu_account.setTitle(_translate("MainWindow", "用户(&U)"))
        self.menu_system.setTitle(_translate("MainWindow", "系统(&S)"))
        self.menu_versioncheck.setText(_translate("MainWindow", "检查版本"))
        self.menu_versionhis.setText(_translate("MainWindow", "更新历史"))
        self.menu_login.setText(_translate("MainWindow", "登陆"))
        self.menu_reg.setText(_translate("MainWindow", "注册"))
        self.menu_recharge.setText(_translate("MainWindow", "充值"))
        self.menu_modifypwd.setText(_translate("MainWindow", "修改密码"))
        self.menu_logout.setText(_translate("MainWindow", "登出"))
        self.menu_help.setText(_translate("MainWindow", "帮助中心"))
        self.menu_contact.setText(_translate("MainWindow", "联系我"))
        self.menu_exit.setText(_translate("MainWindow", "退出"))
